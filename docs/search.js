window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pyMBE", "modulename": "pyMBE", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyMBE.pymbe_library", "modulename": "pyMBE", "qualname": "pymbe_library", "kind": "class", "doc": "<p>The library for the Molecular Brewer for ESPResSo (pyMBE)</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>N_A(<code>obj</code>):</strong>  Avogadro number using the <code>pmb.units</code> UnitRegistry.</li>\n<li><strong>Kb(<code>obj</code>):</strong>  Boltzmann constant using the <code>pmb.units</code> UnitRegistry.</li>\n<li><strong>e(<code>obj</code>):</strong>  Elemental charge using the <code>pmb.units</code> UnitRegistry.</li>\n<li><strong>df(<code>obj</code>):</strong>  PandasDataframe used to bookkeep all the information stored in pyMBE. Typically refered as <code>pmb.df</code>. </li>\n<li><strong>kT(<code>obj</code>):</strong>  Thermal energy using the <code>pmb.units</code> UnitRegistry. it is used as the unit of reduced energy.</li>\n</ul>\n"}, {"fullname": "pyMBE.pymbe_library.__init__", "modulename": "pyMBE", "qualname": "pymbe_library.__init__", "kind": "function", "doc": "<p>Initializes the pymbe_library by setting up the reduced unit system with <code>temperature</code> and <code>reduced_length</code> \n and sets up  the <code>pmb.df</code> for bookkepping.</p>\n\n<p>Args:\n     - temperature(<code>obj</code>,optional): Value of the temperature in the pyMBE UnitRegistry. Defaults to None.\n     - unit_length(<code>obj</code>, optional): Value of the unit of length in the pyMBE UnitRegistry. Defaults to None.\n     - unit_charge (<code>obj</code>): Reduced unit of charge defined using the <code>pmb.units</code> UnitRegistry. Defaults to None. </p>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <ul>\n  <li>If no <code>temperature</code> is given, a value of 298.15 K is assumed by default.</li>\n  </ul>\n  \n  <p>Note:\n      - If no <code>unit_length</code> is given, a value of 0.355 nm is assumed by default.</p>\n  \n  <p>Note:\n      - If no <code>unit_charge</code> is given, a value of 1 elementary charge is assumed by default.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">unit_length</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">unit_charge</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyMBE.pymbe_library.activate_motion_of_rigid_object", "modulename": "pyMBE", "qualname": "pymbe_library.activate_motion_of_rigid_object", "kind": "function", "doc": "<p>Activates the motion of the rigid object <code>name</code> in the <code>espresso_system</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name(<code>str</code>):</strong>  Label of the object.</li>\n<li><strong>espresso_system(<code>obj</code>):</strong>  Instance of a system object from the espressomd library.</li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>It requires that espressodmd has the following feautures activated: [\"VIRTUAL_SITES_RELATIVE\", \"MASS\"].</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">espresso_system</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.add_bond_in_df", "modulename": "pyMBE", "qualname": "pymbe_library.add_bond_in_df", "kind": "function", "doc": "<p>Adds a bond entry on the <code>pymbe.df</code> storing the particle_ids of the two bonded.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>particle_id1 (<code>int</code>):</strong>  particle_id of the type of the first particle type of the bonded particles</li>\n<li><strong>particle_id2 (<code>int</code>):</strong>  particle_id of the type of the second particle type of the bonded particles</li>\n<li><strong>use_default_bond (<code>bool</code>, optional):</strong>  Controls if a bond of type <code>default</code> is used to bond particle whose bonds types are not defined in <code>pmb.df</code>. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">particle_id1</span>, </span><span class=\"param\"><span class=\"n\">particle_id2</span>, </span><span class=\"param\"><span class=\"n\">use_default_bond</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.add_bonds_to_espresso", "modulename": "pyMBE", "qualname": "pymbe_library.add_bonds_to_espresso", "kind": "function", "doc": "<p>Adds all bonds defined in <code>pmb.df</code> to <code>espresso_system</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>espresso_system (str):</strong>  system object of espressomd library</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">espresso_system</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.add_value_to_df", "modulename": "pyMBE", "qualname": "pymbe_library.add_value_to_df", "kind": "function", "doc": "<p>Adds a value to a cell in the <code>pmb.df</code> DataFrame.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index(<code>int</code>):</strong>  index of the row to add the value to.</li>\n<li><strong>key(<code>str</code>):</strong>  the column label to add the value to.</li>\n<li><strong>warning(<code>bool</code>, optional):</strong>  If true, prints a warning if a value is being overwritten in <code>pmb.df</code>. Defaults to true.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">new_value</span>, </span><span class=\"param\"><span class=\"n\">warning</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.calculate_center_of_mass_of_molecule", "modulename": "pyMBE", "qualname": "pymbe_library.calculate_center_of_mass_of_molecule", "kind": "function", "doc": "<p>Calculates the center of mass of type <code>name</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>molecule_id(<code>int</code>):</strong>  Id of the molecule to be centered.</li>\n<li><strong>espresso_system(<code>obj</code>):</strong>  Instance of a system object from the espressomd library.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>center_of_mass(<code>lst</code>): Coordinates of the center of mass.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">molecule_id</span>, </span><span class=\"param\"><span class=\"n\">espresso_system</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.calculate_HH", "modulename": "pyMBE", "qualname": "pymbe_library.calculate_HH", "kind": "function", "doc": "<p>Calculates the ideal Henderson-Hasselbach titration curve of <code>sequence</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sequence(<code>lst</code>):</strong>  List of <code>name</code>s of particles.</li>\n<li><strong>pH_list(<code>lst</code>):</strong>  pH-values to calculate. </li>\n<li><strong>pka_set(<code>dict</code>):</strong>  {\"name\" : {\"pka_value\": pka, \"acidity\": acidity}}</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Z_HH (<code>lst</code>): Henderson-Hasselbach prediction of the charge of <code>sequence</code> in <code>pH_list</code></p>\n</blockquote>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>If no <code>pH_list</code> is given, 50 equispaced pH-values ranging from 2 to 12 are calculated</p>\n</blockquote>\n\n<h6 id=\"note-2\">Note:</h6>\n\n<blockquote>\n  <p>If no <code>pka_set</code> is given, the pKa values are taken from <code>pmb.df</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sequence</span>, </span><span class=\"param\"><span class=\"n\">pH_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pka_set</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.center_molecule_in_simulation_box", "modulename": "pyMBE", "qualname": "pymbe_library.center_molecule_in_simulation_box", "kind": "function", "doc": "<p>Centers the pmb object matching <code>molecule_id</code> in the center of the simulation box in <code>espresso_md</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>molecule_id(<code>int</code>):</strong>  Id of the molecule to be centered.</li>\n<li><strong>espresso_system(<code>obj</code>):</strong>  Instance of a system object from the espressomd library.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">molecule_id</span>, </span><span class=\"param\"><span class=\"n\">espresso_system</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.check_if_df_cell_has_a_value", "modulename": "pyMBE", "qualname": "pymbe_library.check_if_df_cell_has_a_value", "kind": "function", "doc": "<p>Checks if a cell in the <code>pmb.df</code> at the specified index and column has a value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index(<code>int</code>):</strong>  Index of the row to check.</li>\n<li><strong>key(<code>str</code>):</strong>  Column label to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(<code>bool</code>): <code>True</code> if the cell has a value, <code>False</code> otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.check_if_name_is_defined_in_df", "modulename": "pyMBE", "qualname": "pymbe_library.check_if_name_is_defined_in_df", "kind": "function", "doc": "<p>Checks if <code>name</code> is defined in <code>pmb.df</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name(<code>str</code>):</strong>  label to check if defined in <code>pmb.df</code>.</li>\n<li><strong>pmb_type_to_be_defined(<code>str</code>):</strong>  pmb object type corresponding to <code>name</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><code>bool</code>: <code>True</code> for success, <code>False</code> otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">pmb_type_to_be_defined</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.check_pka_set", "modulename": "pyMBE", "qualname": "pymbe_library.check_pka_set", "kind": "function", "doc": "<p>\"\nChecks that <code>pka_set</code> has the formatting expected by the pyMBE library.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pka_set (dict):</strong>  {\"name\" : {\"pka_value\": pka, \"acidity\": acidity}}</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pka_set</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.clean_df_row", "modulename": "pyMBE", "qualname": "pymbe_library.clean_df_row", "kind": "function", "doc": "<p>Cleans the columns of <code>pmb.df</code> in <code>columns_keys_to_clean</code> of the row with index <code>index</code> by asigning them a np.nan value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index(<code>int</code>):</strong>  Index of the row to clean.</li>\n<li><strong>columns_keys_to_clean(<code>list</code> of <code>str</code>, optional):</strong>  List with the column keys to be cleaned. Defaults to [<code>particle_id</code>, <code>particle_id2</code>, <code>residue_id</code>, <code>molecule_id</code>].</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">index</span>,</span><span class=\"param\">\t<span class=\"n\">columns_keys_to_clean</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;particle_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;particle_id2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;residue_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;molecule_id&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.copy_df_entry", "modulename": "pyMBE", "qualname": "pymbe_library.copy_df_entry", "kind": "function", "doc": "<p>Creates 'number_of_copies' of a given 'name' in <code>pymbe.df</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name(<code>str</code>):</strong>  Label of the particle/residue/molecule type to be created. <code>name</code> must be defined in <code>pmb.df</code></li>\n<li><strong>column_name(<code>str</code>):</strong>  Column name to use as a filter. </li>\n<li><strong>number_of_copies(<code>int</code>):</strong>  number of copies of <code>name</code> to be created.</li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>Currently, column_name only supports \"particle_id\", \"particle_id2\", \"residue_id\" and \"molecule_id\"</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">column_name</span>, </span><span class=\"param\"><span class=\"n\">number_of_copies</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.create_added_salt_in_espresso", "modulename": "pyMBE", "qualname": "pymbe_library.create_added_salt_in_espresso", "kind": "function", "doc": "<p>Creates a <code>c_salt</code> concentration of <code>cation_name</code> and <code>anion_name</code> ions into the <code>espresso_system</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>espresso_system (<code>obj</code>):</strong>  instance of a espresso system object.</li>\n<li><strong>cation_name(<code>str</code>):</strong>  <code>name</code> of a particle with a positive charge.</li>\n<li><strong>anion_name(<code>str</code>):</strong>  <code>name</code> of a particle with a negative charge.</li>\n<li><strong>c_salt (float):</strong>  Salt concentration. </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>c_salt_calculated (float): Calculated salt concentration added to <code>espresso_system</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">espresso_system</span>, </span><span class=\"param\"><span class=\"n\">cation_name</span>, </span><span class=\"param\"><span class=\"n\">anion_name</span>, </span><span class=\"param\"><span class=\"n\">c_salt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.create_counterions_in_espresso", "modulename": "pyMBE", "qualname": "pymbe_library.create_counterions_in_espresso", "kind": "function", "doc": "<p>Creates particles of <code>cation_name</code> and <code>anion_name</code> in <code>espresso_system</code> to counter the net charge of <code>pmb_object</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pmb_object_name(<code>str</code>):</strong>  <code>name</code> of a pymbe object.</li>\n<li><strong>espresso_system(<code>obj</code>):</strong>  Instance of a system object from the espressomd library.</li>\n<li><strong>cation_name(<code>str</code>):</strong>  <code>name</code> of a particle with a positive charge.</li>\n<li><strong>anion_name(<code>str</code>):</strong>  <code>name</code> of a particle with a negative charge.</li>\n</ul>\n\n<p>Returns: \n    counterion_number (dict): {\"name\": number}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pmb_object_name</span>, </span><span class=\"param\"><span class=\"n\">cation_name</span>, </span><span class=\"param\"><span class=\"n\">anion_name</span>, </span><span class=\"param\"><span class=\"n\">espresso_system</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.create_molecule_in_espresso", "modulename": "pyMBE", "qualname": "pymbe_library.create_molecule_in_espresso", "kind": "function", "doc": "<p>Creates <code>number_of_molecules</code> molecule of type <code>name</code> into <code>espresso_system</code> and bookkeeps them into <code>pmb.df</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name(<code>str</code>):</strong>  Label of the molecule type to be created. <code>name</code> must be defined in <code>pmb.df</code></li>\n<li><strong>espresso_system(<code>obj</code>):</strong>  Instance of a system object from espressomd library.</li>\n<li><strong>number_of_molecules(<code>int</code>):</strong>  Number of molecules of type <code>name</code> to be created.</li>\n<li><strong>first_residue_position(<code>list</code>, optional):</strong>  coordinates where the first_residue_position will be created, random by default</li>\n<li><strong>use_default_bond(<code>bool</code>, optional):</strong>  Controls if a bond of type <code>default</code> is used to bond particle with undefined bonds in <code>pymbe.df</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>molecules_info (<code>dict</code>):  {molecule_id: {residue_id:{\"central_bead_id\":central_bead_id, \"side_chain_ids\": [particle_id1, ...]}}}</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_molecules</span>,</span><span class=\"param\">\t<span class=\"n\">espresso_system</span>,</span><span class=\"param\">\t<span class=\"n\">first_residue_position</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_default_bond</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.create_particle_in_espresso", "modulename": "pyMBE", "qualname": "pymbe_library.create_particle_in_espresso", "kind": "function", "doc": "<p>Creates <code>number_of_particles</code> particles of type <code>name</code> into <code>espresso_system</code> and bookkeeps them into <code>pymbe.df</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (<code>str</code>):</strong>  Label of the particle type to be created. <code>name</code> must be a <code>particle</code> defined in <code>pmb_df</code>. </li>\n<li><strong>espresso_system (<code>cls</code>):</strong>  Instance of a system object from the espressomd library.</li>\n<li><strong>number_of_particles (<code>int</code>):</strong>  Number of particles to be created.</li>\n<li><strong>position (list of [<code>float</code>,<code>float</code>,<code>float</code>], optional):</strong>  Initial positions of the particles. If not given, particles are created in random positions. Defaults to None.</li>\n<li><strong>fix(<code>bool</code>, optional):</strong>  Controls if the particle motion is frozen in the integrator, it is used to create rigid objects. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>created_pid_list(<code>list</code> of <code>float</code>): List with the ids of the particles created into <code>espresso_system</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">espresso_system</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_particles</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fix</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.create_pmb_object_in_espresso", "modulename": "pyMBE", "qualname": "pymbe_library.create_pmb_object_in_espresso", "kind": "function", "doc": "<p>Creates all <code>particle</code>s associated to <code>pmb object</code> into  <code>espresso</code> a number of times equal to <code>number_of_objects</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name(<code>str</code>):</strong>  Unique label of the <code>pmb object</code> to be created. </li>\n<li><strong>number_of_objects(<code>int</code>):</strong>  Number of <code>pmb object</code>s to be created.</li>\n<li><strong>espresso_system(<code>obj</code>):</strong>  Instance of a espresso system object from espressomd library.</li>\n<li><strong>position(<code>list</code>):</strong>  Coordinates where the particles should be created.</li>\n<li><strong>use_default_bond(<code>bool</code>,optional):</strong>  Controls if a <code>default</code> bond is used to bond particles with undefined bonds in <code>pmb.df</code>. Defaults to <code>False</code>.</li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>If no <code>position</code> is given, particles will be created in random positions. For bonded particles, they will be created at a distance equal to the bond length.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_objects</span>,</span><span class=\"param\">\t<span class=\"n\">espresso_system</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_default_bond</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.create_protein_in_espresso", "modulename": "pyMBE", "qualname": "pymbe_library.create_protein_in_espresso", "kind": "function", "doc": "<p>Creates <code>number_of_proteins</code> molecule of type <code>name</code> into <code>espresso_system</code> in the coordinates in <code>positions</code></p>\n\n<p>PABLO-NOTE: The structure of <code>positions</code> needs to be discussed with Pao</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name(<code>str</code>):</strong>  Label of the protein to be created. </li>\n<li><strong>espresso_system(<code>obj</code>):</strong>  Instance of a system object from the espressomd library.</li>\n<li><strong>number_of_proteins(<code>int</code>):</strong>  Number of proteins to be created.</li>\n<li><strong>positions(<code>dict</code>):</strong>  {'ResidueNumber': {'initial_pos': [], 'chain_id': ''}}</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">number_of_proteins</span>, </span><span class=\"param\"><span class=\"n\">espresso_system</span>, </span><span class=\"param\"><span class=\"n\">positions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.create_residue_in_espresso", "modulename": "pyMBE", "qualname": "pymbe_library.create_residue_in_espresso", "kind": "function", "doc": "<p>Creates <code>number_of_residues</code> residues of type <code>name</code> into <code>espresso_system</code> and bookkeeps them into <code>pmb.df</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name(<code>str</code>):</strong>  Label of the residue type to be created. <code>name</code> must be defined in <code>pmb.df</code></li>\n<li><strong>espresso_system(<code>obj</code>):</strong>  Instance of a system object from espressomd library.</li>\n<li><strong>number_of_residue(<code>int</code>):</strong>  Number of residues of type <code>name</code> to be created.</li>\n<li><strong>central_bead_position(<code>list</code> of <code>float</code>):</strong>  Position of the central bead.</li>\n<li><strong>use_default_bond (<code>bool</code>):</strong>  Switch to control if a bond of type <code>default</code> is used to bond particle whose bonds types are not defined in <code>pmb.df</code></li>\n<li><strong>backbone_vector (<code>list</code> of <code>float</code>):</strong>  Backbone vector of the molecule. All side chains are created perpendicularly to <code>backbone_vector</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>residues_info (<code>dict</code>): {residue_id:{\"central_bead_id\":central_bead_id, \"side_chain_ids\":[particle_id1, ...]}}</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">espresso_system</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_residues</span>,</span><span class=\"param\">\t<span class=\"n\">central_bead_position</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_default_bond</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">backbone_vector</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.create_variable_with_units", "modulename": "pyMBE", "qualname": "pymbe_library.create_variable_with_units", "kind": "function", "doc": "<p>Returns a pint object with the value and units defined in <code>variable_dict</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>variable_dict(<code>dict</code>):</strong>  {'value': value, 'units': units}</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>variable_with_units(<code>obj</code>): variable with units using the pyMBE UnitRegistry.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">variable_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.define_AA_particles_in_sequence", "modulename": "pyMBE", "qualname": "pymbe_library.define_AA_particles_in_sequence", "kind": "function", "doc": "<p>Defines in <code>pmb.df</code> all the different particles in <code>sequence</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sequence(<code>lst</code>):</strong>   Sequence of the peptide or protein. </li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>It assumes that the names in <code>sequence</code> correspond to aminoacid names using the standard  one letter code.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sequence</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.define_bond", "modulename": "pyMBE", "qualname": "pymbe_library.define_bond", "kind": "function", "doc": "<p>Defines a pmb object of type <code>bond</code> in <code>pymbe.df</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>bond_object (<code>cls</code>):</strong>  instance of a bond object from espressomd library</li>\n<li><strong>particle_name1 (<code>str</code>):</strong>  <code>name</code> of the first <code>particle</code> to be bonded.</li>\n<li><strong>particle_name2 (<code>str</code>):</strong>  <code>name</code> of the second <code>particle</code> to be bonded..</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bond_object</span>, </span><span class=\"param\"><span class=\"n\">particle_name1</span>, </span><span class=\"param\"><span class=\"n\">particle_name2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.define_default_bond", "modulename": "pyMBE", "qualname": "pymbe_library.define_default_bond", "kind": "function", "doc": "<p>Asigns <code>bond</code> in <code>pmb.df</code> as the default bond.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>bond (<code>obj</code>):</strong>  instance of a bond object from the espressomd library.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bond_object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.define_epsilon_value_of_particles", "modulename": "pyMBE", "qualname": "pymbe_library.define_epsilon_value_of_particles", "kind": "function", "doc": "<p>Defines the epsilon value of the particles in <code>eps_dict</code> into the <code>pmb.df</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>eps_dict(<code>dict</code>):</strong>   {'name': epsilon}</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">eps_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.define_molecule", "modulename": "pyMBE", "qualname": "pymbe_library.define_molecule", "kind": "function", "doc": "<p>Defines a pyMBE object of type <code>molecule</code> in <code>pymbe.df</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (<code>str</code>):</strong>  Unique label that identifies the <code>molecule</code>.</li>\n<li><strong>residue_list (<code>list</code> of <code>str</code>):</strong>  List of the <code>name</code>s of the <code>residue</code>s  in the sequence of the <code>molecule</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">residue_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.define_particle", "modulename": "pyMBE", "qualname": "pymbe_library.define_particle", "kind": "function", "doc": "<p>Defines a pyMBE object of type <code>particle</code> in  <code>pymbe.df</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (<code>str</code>):</strong>  Unique label that identifies the <code>particle</code>.  </li>\n<li><strong>q (<code>int</code>, optional):</strong>  Charge of the <code>particle</code>. Defaults to 0.</li>\n<li><strong>diameter (<code>obj</code>, optional):</strong>  Diameter used to setup Lennard-Jones interactions for the <code>particle</code>, should have units of length using the <code>pmb.units</code> UnitRegistry. Defaults to None.</li>\n<li><strong>epsilon (<code>obj</code>, optional):</strong>  Epsilon parameter used to setup Lennard-Jones interactions for the <code>particle</code>, should have units of energy using the <code>pmb.units</code> UnitRegistry.. Defaults to None</li>\n<li><strong>acidity (<code>str</code>, optional):</strong>  Identifies whether if the particle is <code>acidic</code> or <code>basic</code>, used to setup constant pH simulations. Defaults to <code>inert</code>.</li>\n<li><strong>pka (<code>float</code>, optional):</strong>  If <code>particle</code> is an acid or a base, it defines its  pka-value. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">q</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">diameter</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">acidity</span><span class=\"o\">=</span><span class=\"s1\">&#39;inert&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pka</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.define_peptide", "modulename": "pyMBE", "qualname": "pymbe_library.define_peptide", "kind": "function", "doc": "<p>Defines a pyMBE object of type <code>peptide</code> in the <code>pymbe.df</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (<code>str</code>):</strong>  Unique label that identifies the <code>peptide</code>.</li>\n<li><strong>sequence (<code>string</code>):</strong>  Sequence of the <code>peptide</code>.</li>\n<li><strong>model (<code>string</code>):</strong>  Model name. Currently only models with 1 bead '1beadAA' or with 2 beads '2beadAA' per aminoacid are supported.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">sequence</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.destroy_pmb_object_in_system", "modulename": "pyMBE", "qualname": "pymbe_library.destroy_pmb_object_in_system", "kind": "function", "doc": "<p>Destroys all particles associated with <code>name</code> in <code>espresso_system</code> amd removes the destroyed pmb_objects from <code>pmb.df</code> </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Label of the pmb object to be destroyed. The pmb object must be defined in <code>pymbe.df</code>.</li>\n<li><strong>espresso_system (cls):</strong>  Instance of a system class from espressomd library.</li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>If <code>name</code>  is a object_type=<code>particle</code>, only the mathcing particles that are not part of bigger objects (e.g. <code>residue</code>, <code>molecule</code>) will be destroyed. To destroy particles in such objects, destroy the bigger object instead.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">espresso_system</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.define_residue", "modulename": "pyMBE", "qualname": "pymbe_library.define_residue", "kind": "function", "doc": "<p>Defines a pyMBE object of type <code>residue</code> in <code>pymbe.df</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (<code>str</code>):</strong>  Unique label that identifies the <code>residue</code>.</li>\n<li><strong>central_bead (<code>str</code>):</strong>  <code>name</code> of the <code>particle</code> to be placed as central_bead of the <code>residue</code>.</li>\n<li><strong>side_chains (<code>list</code> of <code>str</code>):</strong>  List of <code>name</code>s of the pmb_objects to be placed as side_chains of the <code>residue</code>. Currently, only pmb_objects of type <code>particle</code>s or <code>residue</code>s are supported.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">central_bead</span>, </span><span class=\"param\"><span class=\"n\">side_chains</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.filter_df", "modulename": "pyMBE", "qualname": "pymbe_library.filter_df", "kind": "function", "doc": "<p>Filters <code>pmb.df</code> and returns a sub-set of it containing only rows with pmb_object_type=<code>pmb_type</code> and non-Nan columns.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pmb_type(<code>str</code>):</strong>  pmb_object_type to filter in <code>pmb.df</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pmb_type_df(<code>obj</code>): filtered <code>pmb.df</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pmb_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.find_bond_key", "modulename": "pyMBE", "qualname": "pymbe_library.find_bond_key", "kind": "function", "doc": "<p>Searches for the <code>name</code>  of the bond between <code>particle_name1</code> and <code>particle_name2</code> in <code>pymbe.df</code> and returns it.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>particle_name1(<code>str</code>):</strong>  label of the type of the first particle type of the bonded particles.</li>\n<li><strong>particle_name2(<code>str</code>):</strong>  label of the type of the second particle type of the bonded particles.</li>\n<li><strong>use_default_bond(<code>bool</code>, optional):</strong>  If it is activated, the \"default\" bond is returned if no bond is found between <code>particle_name1</code> and <code>particle_name2</code>. Defaults to 'False'. </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bond_key (str): <code>name</code> of the bond between <code>particle_name1</code> and <code>particle_name2</code> </p>\n</blockquote>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>If <code>use_default_bond</code>=<code>True</code>, it returns \"default\" if no key is found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">particle_name1</span>, </span><span class=\"param\"><span class=\"n\">particle_name2</span>, </span><span class=\"param\"><span class=\"n\">use_default_bond</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.find_value_from_es_type", "modulename": "pyMBE", "qualname": "pymbe_library.find_value_from_es_type", "kind": "function", "doc": "<p>Finds a value in <code>pmb.df</code> for a <code>column_name</code> and <code>es_type</code> pair.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>es_type(<code>int</code>):</strong>  value of the espresso type</li>\n<li><strong>column_name(<code>str</code>):</strong>  name of the column in <code>pymbe.df</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Value in <code>pymbe.df</code> matching  <code>column_name</code> and <code>es_type</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">es_type</span>, </span><span class=\"param\"><span class=\"n\">column_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.generate_coordinates_outside_sphere", "modulename": "pyMBE", "qualname": "pymbe_library.generate_coordinates_outside_sphere", "kind": "function", "doc": "<p>Generates coordinates outside a sphere centered.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>center(<code>lst</code>):</strong>  Coordinates of the center of the sphere.</li>\n<li><strong>radius(<code>float</code>):</strong>  Radius of the sphere.</li>\n<li><strong>max_dist(<code>float</code>):</strong>  Maximum distance from the center of the spahre to generate coordinates.</li>\n<li><strong>n_samples(<code>int</code>):</strong>  Number of sample points.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>coord_list(<code>lst</code>): Coordinates of the sample points.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">max_dist</span>, </span><span class=\"param\"><span class=\"n\">n_samples</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.generate_trial_perpendicular_vector", "modulename": "pyMBE", "qualname": "pymbe_library.generate_trial_perpendicular_vector", "kind": "function", "doc": "<p>Generates a random vector perpendicular to <code>vector</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vector(<code>lst</code>):</strong>  Coordinates of the vector.</li>\n<li><strong>magnitude(<code>float</code>):</strong>  magnitude of the vector perpendicular to <code>vector</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>perpendicular_vector(<code>np.array</code>): random vector perpendicular to <code>vector</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vector</span>, </span><span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">radius</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.generate_trialvectors", "modulename": "pyMBE", "qualname": "pymbe_library.generate_trialvectors", "kind": "function", "doc": "<p>Uniformly samples points from a hypersphere.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>center(<code>lst</code>):</strong>  Array with the coordinates of the center of the spheres.</li>\n<li><strong>radius(<code>float</code>):</strong>  Radius of the sphere.</li>\n<li><strong>n_samples(<code>int</code>):</strong>  Number of sample points to generate inside the sphere.</li>\n<li><strong>seed (<code>int</code>, optional):</strong>  Seed for the random number generator</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>samples(<code>list</code>): Coordinates of the sample points inside the hypersphere.</p>\n</blockquote>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>Algorithm from: <a href=\"https://baezortega.github.io/2018/10/14/hypersphere-sampling/\">https://baezortega.github.io/2018/10/14/hypersphere-sampling/</a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">n_samples</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.get_charge_map", "modulename": "pyMBE", "qualname": "pymbe_library.get_charge_map", "kind": "function", "doc": "<p>Gets the charge of each <code>espresso_type</code> in <code>pymbe.df</code>.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>charge_map(<code>dict</code>): {espresso_type: charge}.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.get_pka_set", "modulename": "pyMBE", "qualname": "pymbe_library.get_pka_set", "kind": "function", "doc": "<p>Gets the pka-values and acidities of the particles with acid/base properties in <code>pmb.df</code></p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pka_set(<code>dict</code>): {\"name\" : {\"pka_value\": pka, \"acidity\": acidity}}</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.get_radius_map", "modulename": "pyMBE", "qualname": "pymbe_library.get_radius_map", "kind": "function", "doc": "<p>Gets the diameter of each <code>espresso type</code> in <code>pmb.df</code>. </p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>radius_map(<code>dict</code>): {espresso_type: radius}.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.get_type_map", "modulename": "pyMBE", "qualname": "pymbe_library.get_type_map", "kind": "function", "doc": "<p>Gets all different espresso types assigned to particles  in <code>pmb.df</code>.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>type_map(<code>dict</code>): {\"name\": espresso_type}.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.load_interaction_parameters", "modulename": "pyMBE", "qualname": "pymbe_library.load_interaction_parameters", "kind": "function", "doc": "<p>Loads the interaction parameters stored in filename into <code>pmb.df</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename(<code>str</code>):</strong>  name of the file to be read</li>\n<li><strong>verbose(<code>bool</code>):</strong>  switches on/off the reading prints</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.load_pka_set", "modulename": "pyMBE", "qualname": "pymbe_library.load_pka_set", "kind": "function", "doc": "<p>Loads the pka_set stored in <code>filename</code> into <code>pmb.df</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename(<code>str</code>):</strong>  name of the file with the pka set to be loaded. Expected format is {name:{\"acidity\": acidity, \"pka_value\":pka_value}}.</li>\n<li><strong>verbose(<code>bool</code>, optional):</strong>  If activated, the function reports each pKa value loaded. Defaults to False</li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>If <code>name</code> is already defined in the <code>pymbe.df</code>, it prints a warning.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.load_protein_vtf_in_df", "modulename": "pyMBE", "qualname": "pymbe_library.load_protein_vtf_in_df", "kind": "function", "doc": "<p>Loads a coarse-grained protein model in a vtf file <code>filename</code> into the <code>pmb.df</code> and it labels it with <code>name</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name(<code>str</code>):</strong>  Unique label to identify the protein.</li>\n<li><strong>filename(<code>str</code>):</strong>  Path to the vtf file with the coarse-grained model.</li>\n<li><strong>unit_length(<code>obj</code>):</strong>  unit of lenght of the the coordinates in <code>filename</code> using the pyMBE UnitRegistry. Defaults to None.</li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>If no <code>unit_length</code> is provided, it is assumed that the coordinates are in Angstrom.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">unit_length</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.print_reduced_units", "modulename": "pyMBE", "qualname": "pymbe_library.print_reduced_units", "kind": "function", "doc": "<p>Prints the  current set of reduced units defined in pyMBE.units.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.propose_unused_type", "modulename": "pyMBE", "qualname": "pymbe_library.propose_unused_type", "kind": "function", "doc": "<p>Searches in <code>pmb.df</code> all the different particle types defined and returns a new one.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>unused_type(<code>int</code>): unused particle type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.protein_sequence_parser", "modulename": "pyMBE", "qualname": "pymbe_library.protein_sequence_parser", "kind": "function", "doc": "<p>Parses <code>sequence</code> to the one letter code for aminoacids.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sequence(<code>str</code> or <code>lst</code>):</strong>  Sequence of the aminoacid. </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>clean_sequence(<code>list</code>): <code>sequence</code> using the one letter code.</p>\n</blockquote>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>Accepted formats for <code>sequence</code> are:\n  1) <code>lst</code> with one letter or three letter code of each aminoacid in each element\n  2) <code>str</code> with the sequence using the one letter code\n  3) <code>str</code> with the squence using the three letter code, each aminoacid must be separated by a hyphon \"-\"</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sequence</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.search_bond", "modulename": "pyMBE", "qualname": "pymbe_library.search_bond", "kind": "function", "doc": "<p>Searches for between the particle types given by <code>particle_name1</code> and <code>particle_name2</code> in <code>pymbe.df</code> and returns it.\nIf <code>use_default_bond</code> is activated and a \"default\" bond is defined, returns that default bond instead.\nIf no bond is found, it prints a message and it does not return nothing. If <code>hard_check</code> is activated, the code stops if no bond is found.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>particle_name1 (str):</strong>  label of the type of the first particle type of the bonded particles.</li>\n<li><strong>particle_name2 (str):</strong>  label of the type of the second particle type of the bonded particles.</li>\n<li><strong>hard_check (bool, optional):</strong>  If it is activated, the code stops if no bond is found. Defaults to False. </li>\n<li><strong>use_default_bond (bool, optional):</strong>  If it is activated, the \"default\" bond is returned if no bond is found between <code>particle_name1</code> and <code>particle_name2</code>. Defaults to False. </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bond (cls): bond object from the espressomd library.</p>\n</blockquote>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>If <code>use_default_bond</code>=True and no bond is defined between <code>particle_name1</code> and <code>particle_name2</code>, it returns the default bond defined in <code>pmb.df</code>.</p>\n</blockquote>\n\n<h6 id=\"note-2\">Note:</h6>\n\n<blockquote>\n  <p>If <code>hard_check</code>=<code>True</code> stops the code when no bond is found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">particle_name1</span>,</span><span class=\"param\">\t<span class=\"n\">particle_name2</span>,</span><span class=\"param\">\t<span class=\"n\">hard_check</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">use_default_bond</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.set_particle_acidity", "modulename": "pyMBE", "qualname": "pymbe_library.set_particle_acidity", "kind": "function", "doc": "<p>Sets the particle acidity if its acidic or basic creates <code>state_one</code> and <code>state_two</code> with the protonated and \ndeprotonated states. In each state is set: <code>label</code>,<code>charge</code> and <code>es_type</code>. If its inert it will define only <code>state_one</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (<code>str</code>):</strong>  Unique label that identifies the <code>particle</code>. </li>\n<li><strong>acidity (<code>str</code>):</strong>  Identifies whether if the particle is <code>acidic</code> or <code>basic</code>, used to setup constant pH simulations. Defaults to <code>inert</code>.</li>\n<li><strong>default_charge (<code>int</code>):</strong>  Charge of the particle. Defaults to 0.</li>\n<li><strong>pka (<code>float</code>, optional):</strong>   If <code>particle</code> is an acid or a base, it defines its  pka-value. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">acidity</span><span class=\"o\">=</span><span class=\"s1\">&#39;inert&#39;</span>, </span><span class=\"param\"><span class=\"n\">default_charge</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">pka</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.set_reduced_units", "modulename": "pyMBE", "qualname": "pymbe_library.set_reduced_units", "kind": "function", "doc": "<p>Sets the set of reduced units used by pyMBE.units and it prints it.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_length (<code>obj</code>):</strong>  Reduced unit of length defined using the <code>pmb.units</code> UnitRegistry. Defaults to None. </li>\n<li><strong>unit_charge (<code>obj</code>):</strong>  Reduced unit of charge defined using the <code>pmb.units</code> UnitRegistry. Defaults to None. </li>\n<li><strong>temperature (<code>obj</code>):</strong>  Temperature of the system, defined using the <code>pmb.units</code> UnitRegistry. Defaults to None. </li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <ul>\n  <li>If no <code>temperature</code> is given, a value of 298.15 K is assumed by default.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"note-2\">Note:</h6>\n\n<blockquote>\n  <ul>\n  <li>If no <code>unit_length</code> is given, a value of 0.355 nm is assumed by default.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"note-3\">Note:</h6>\n\n<blockquote>\n  <ul>\n  <li>If no <code>unit_charge</code> is given, a value of 1 elementary charge is assumed by default.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unit_length</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">unit_charge</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.setup_constantpH_reactions_in_espresso", "modulename": "pyMBE", "qualname": "pymbe_library.setup_constantpH_reactions_in_espresso", "kind": "function", "doc": "<p>Sets up the Acid/Base reactions for acidic/basic <code>particles</code> defined in <code>pmb.df</code> to be sampled in the constant pH ensamble. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>counter_ion(<code>str</code>):</strong>  <code>name</code> of the counter_ion <code>particle</code>.</li>\n<li><strong>constant_pH(<code>float</code>):</strong>  pH-value.</li>\n<li><strong>SEED(<code>int</code>):</strong>  Seed for the random number generator.</li>\n<li><strong>exclusion_range(<code>float</code>, optional):</strong>  Bellow this value, no particles will be inserted.</li>\n<li><strong>use_exclusion_radius_per_type(<code>bool</code>,optional):</strong>  Controls if one exclusion_radius per each espresso_type. Defaults to <code>False</code>.</li>\n<li><strong>pka_set(<code>dict</code>,optional):</strong>  Desired pka_set, pka_set(<code>dict</code>): {\"name\" : {\"pka_value\": pka, \"acidity\": acidity}}. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>RE (<code>obj</code>): Instance of a reaction_ensemble.ConstantpHEnsemble object from the espressomd library.\n  sucessfull_reactions_labels(<code>lst</code>): Labels of the reactions set up by pyMBE.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">counter_ion</span>,</span><span class=\"param\">\t<span class=\"n\">constant_pH</span>,</span><span class=\"param\">\t<span class=\"n\">SEED</span>,</span><span class=\"param\">\t<span class=\"n\">exclusion_range</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pka_set</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_exclusion_radius_per_type</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.setup_df", "modulename": "pyMBE", "qualname": "pymbe_library.setup_df", "kind": "function", "doc": "<p>Sets up the pyMBE's dataframe <code>pymbe.df</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.setup_lj_interactions_in_espresso", "modulename": "pyMBE", "qualname": "pymbe_library.setup_lj_interactions_in_espresso", "kind": "function", "doc": "<p>Sets up the Lennard-Jones (LJ) potential between all pairs of particle types with values for <code>diameter</code> and <code>epsilon</code> stored in <code>pymbe.df</code>.\nStores the parameters loaded into  ESPResSo for each type pair in <code>pymbe.df</code>.\nAssumes that the LJ interactions between all particles will have the same <code>cutoff</code>, <code>shift</code> and <code>combining_rule</code>.\nCheck the documentation of ESPResSo for more info about the potential <a href=\"https://espressomd.github.io/doc4.2.0/inter_non-bonded.html\">https://espressomd.github.io/doc4.2.0/inter_non-bonded.html</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>espresso_system(<code>obj</code>):</strong>  Instance of a system object from the espressomd library.</li>\n<li><strong>cutoff(<code>float</code>, optional):</strong>  cut-off length of the LJ potential. Defaults to None.</li>\n<li><strong>shift (<code>string</code>, optional):</strong>  If set to <code>auto</code> shifts the potential to be continous at <code>cutoff</code>. Defaults to <code>auto</code>.</li>\n<li><strong>combining_rule (<code>string</code>, optional):</strong>  combining rule used to calculate <code>sigma</code> and <code>epsilon</code> for the potential betwen a pair of particles. Defaults to 'Lorentz-Berthelot'.</li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>If no <code>cutoff</code>  is given, its value is set to 2**(1./6.) in reduced_lenght units, corresponding to a purely steric potential.</p>\n</blockquote>\n\n<h6 id=\"note-2\">Note:</h6>\n\n<blockquote>\n  <p>Currently, the only <code>combining_rule</code> supported is Lorentz-Berthelot.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">espresso_system</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">shift</span><span class=\"o\">=</span><span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">combining_rule</span><span class=\"o\">=</span><span class=\"s1\">&#39;Lorentz-Berthelot&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.setup_particle_diameter", "modulename": "pyMBE", "qualname": "pymbe_library.setup_particle_diameter", "kind": "function", "doc": "<p>Sets up the diameter of the particles in <code>positions</code>.\nPABLO-NOTE: The structure of <code>positions</code> needs to be discussed with Pao</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>positions (dict):</strong> {'ResidueNumber': {'initial_pos': [], 'chain_id': ''}}</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyMBE.pymbe_library.write_output_vtf_file", "modulename": "pyMBE", "qualname": "pymbe_library.write_output_vtf_file", "kind": "function", "doc": "<p>Writes a snapshot of <code>espresso_system</code> on the vtf file <code>filename</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>espresso_system(<code>obj</code>):</strong>  Instance of a system object from the espressomd library.</li>\n<li><strong>filename(<code>str</code>):</strong>  Path to the vtf file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">espresso_system</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();