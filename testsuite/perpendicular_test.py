import sys
import os 
import inspect
import numpy as np
import random
current_dir= os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
path_end_index=current_dir.find("dendrimer_dna")

code_path=current_dir[0:path_end_index]+"dendrimer_dna"
pyMBE_path = code_path + '/pyMBE'
sys.path.insert(0, pyMBE_path)
import pyMBE
pmb = pyMBE.pymbe_library()


#Defining variables for test
center = [0, 0, 0]
radius = 1
n = 10
tolerance = 1e-3
original_vector = pmb.generate_trialvectors(center=center,radius=radius, n_samples=1, seed=None, on_surface=True)[0]
perpendicular_vectors = []
for _ in range(n):
    perpendicular_vector = pmb.generate_trial_perpendicular_vector(original_vector, center, radius)
    perpendicular_vectors.append(perpendicular_vector)

print(f"***Perpendicular vector unit test***")
print(f"***Unit test: Checks that the generated vector is perpendicular to the original vector {n} times.***")
for vector in perpendicular_vectors:
    np.testing.assert_almost_equal(actual = np.dot(original_vector, vector),
                            desired = 0,
                            decimal = 5,
                            verbose = True)
print(f"***Unit test passed***")

print(f"***Unit test: Checks that {n} generated perpendicular vectors are unique.***")
unique_set = set()
for vector in perpendicular_vectors:
    vector_tuple = tuple(round(coord, 2) for coord in vector)
    unique_set.add(vector_tuple)
np.testing.assert_equal(actual = len(unique_set), desired = n, verbose = True)
print(f"***Unit test passed***")


   
print(f"***Unit test: Checks that {n} generated perpendicular vectors have the same magnitude as the input vector {original_vector} generated by pyMBE function.***")
for vector in perpendicular_vectors:
    np.testing.assert_almost_equal(actual = np.linalg.norm(vector), desired = np.linalg.norm(original_vector), decimal = 5, verbose = True)
print(f"***Unit test passed")
print(f"*** All unit tests passed ***")